	Task1 
A. A greedy algorithm will be used to deliver the packages.
B) A hash table is a self-adjusting data structure that can be used in order to store packages.
1. Explain how your data structure accounts for the relationship between the data components you are storing.
The data structures decided for the program are lists and dictionaries. A Dictionary stores data as key-value pair. With dictionaries, we can access and change the package location if we know it's key in O(1) time. A list can store store packages and address as well however , it is more resource straining whenever data has to be accessed, we will need to write a loop to search through the list. To reduce manually searching the list, we can write a lookup function however it is more efficient to use a dictionary
2. Programming environment: VSCode IDE / IDE Terminal. Python version 3.8
3) First we need to parse the data from the csv and store them in a data structure. Individual parsing functions are used to accomplish this task. The time - space complexity depends on the exponential numbers rows from the csv file which will be O(N). A method implemented seperately to deliver packages runs in O(N^3) time. A while loop continously checks for packages in the truck object, another loop checks for packages in queue. The third loop counts the number of packages within a list and appends them to a queue. Space complexity is O(N) since we're going to use a queue to load up the packages and sort them in order to deliver.
4) The program relies on an external lookUp method, data structure (distanceData) for calculating distances. This design allows flexibility if data retrieval or distance methods needs to be changed. More extensive error handling can improve maintainability by making the system robust against unexpected input. Currently, the system operates in a single-threaded manner, processing one truck’s deliveries at a time. For scalability, parallelism could be introduced to process multiple trucks / packages concurrently, making the system more responsive to larger datasets. Refactoring the system to automatically handle additional trucks based on load would enhance scalability.
5) The code is modular, each function handles a specific part of the logic, such as loadAddresses(), loadPackages(). This separation of concerns makes it easier to maintain individual pieces without affecting the entire system. The program is straightforward to use with an implementation of terminal interface. Calculations are performed in the background and stored within class objects. Useful functions are implemented, that are accessible through dot operators. It maintainable , using basic programming principles , there are comments throughout the program explaining the code structure. Print statements on initialized memory structures are performed to verify data integrity.
 6) Lists can store packages and offer fast lookups. However, they are limited by the available memory of the hardware's RAM. Lists are straightforward to implement but lack the structure needed for more complex data handling. On the other hand, dictionaries provide a more organized way to manage key-value pairs.  They can encounter issues with hash collisions as more addresses are added, leading to slow lookups. When multiple values hash to the same bucket, it results in decreased performance.
C. Write an overview of your program in which you do the following:
1. Explain the algorithm’s logic using pseudocode.
define deliver():
    queue = [LoadPackages]
    while queue:
            package = lookUp(package.id)
            if package:
                distance = distanceData[truck.address][package.address]
                nextPackage = package
        if nextPackage:
            distance = distanceData[truck.address][nextPackage.address]
            truck.miles += distance
            truck.time += datetime.timedelta(minutes=(1 / (60 / 18))) //18mi/60mins

D. A list is a linear data structure used to store a collection of items. In this case, package.It is capable of dynamic sizing based on the number of elements added. Lists offer several advantages:
Dynamic Memory Allocation: Lists can adjust in size, utlizing the underlying hardware's RAM.
Fast Access: Lists provide O(1) access to elements based on their index. Insertion and deletion operations are performed in linear time O(N).
Hash Table for Mapping Packages
A hash table is a data structure that uses unique identifiers, known as keys, with their corresponding values. This structure uses a hash function to convert keys into indices in an array, creating a mapping system.
Key-Value Mapping: Each key is associated with a value, allowing for efficient data retrieval based on the unique identifier. This mapping enhances data organization and accessibility.
Handling Collisions: When collisions occur, chaining is used (where a linked list is maintained at each index) or open addressing.
2)
E) I'll be using code for the hashtable from the webinar
F)
G) Provide interface and lookup function. Screenshot of package delivery status between 8:35 and 9:25, 9:35 and 10:25, 12:03 and 1:12
H.  Provide a screenshot showing successful completion of the code, that includes the total mileage traveled by all trucks.
 

I) 
-The Greedy algorithm operates on the principle of making optimal choice that lead to a global optimum. In context of package delivery, the algorithm prioritizes deliveries based on a specific criterion—such as the nearest delivery location—without considering the broader implications of each choice.
-Breadth-First Search (BFS) is a graph traversal algorithm that visits vertices in layers, starting from a designated source vertex. It systematically visits neighboring vertices at the present depth level before moving on to the vertices at the next depth level.
The current solution finds the shortest path from one package location uses a more comprehensive approach than the simple greedy algorithm. It may incorporate  Dijkstra’s or A* search, which account for distances and the constraints. Unlike BFS, which is effective for unweighted scenarios, these algorithms can handle weighted graphs, giving leeway for more nuanced decision-making that balances multiple factors, such as distance and time.

J.  Describe what you would do differently, other than the two algorithms identified in I3, if you did this project again.
There would've been an if-else structure to decide where trucks the packages should be going based on the notes and deadlines. I'd a consider a more graph based program that maps out a route by comparing distances between all the edge cases and deciding  an optimal path that is shortest using djistra's algorithm.
K
a) Lists were used to store packages. Whenever data is fetched from the hashtable, intiated lists on the main file are used to stored them. They're flexible when it comes to storing various data types and is able to handle large volumes of data as well without tradeoff in performance. The spacial complexity of list sits at o(n + k) which means it continously expands as more packages are added if more addresses have to be delivered it'll add onto the spacial usage. 
b) Arrays can be used to store the distances while dictionaries can store the packages. 
-With arrays we represent the mappings between 2nd distances. 
- Dictionaries can use the packages as keys to create hashes.
The system can utilize arrays to find the shortest distances between locations while using the dictionary to quickly access the associated package information for each delivery point. This combination optimizes both the speed and efficiency of the delivery process.
c) The implications is when we're manually loading the packages. It's going to be difficult when there is a larger volume. That is the reason there is a decision structure automatically decide where the packages are getting loaded based on the EOC.
2) Dictionary for the hashtable and queue for the distance
a) Dictionaries can be efficient when come to quickly fetching packages since it's lookup time is O(1). Queues can useful for loading up packages instead of dictionaries. A queue operates on the (FIFO) principle, making it suitable for managing the order of packages being loaded and unloaded. This is useful when tracking packages.

L) Code for hashtable referenced from webinar
class HashTable:
    def __init__(self, initial_capacity=41):
        # initialize the table with predefined capacity
        self.initial_capacity = initial_capacity
        self.table = []
        for i in range(initial_capacity):
            self.table.append([])

    #function to add new item to table. O(1)
    def insert(self, key, item):
        #first hashes the key with length of table
        bucket = hash(key) % len(self.table)
        bucket_list = self.table[bucket]
        for kv in bucket_list:
            if kv[0] == key:
                kv[1] = item
                return True
        # insert key/value pair as item to table
        key_value = [key, item]
        bucket_list.append(key_value)
        return True

    #search for an item with matching key in hash table. hashes the parameter key and checks if the hashed key matches with existing keys in the table. O(1)
    def search(self, key):
        bucket = hash(key) % len(self.table)
        bucket_list = self.table[bucket]
        # search for the key in the bucket 
        for kv in bucket_list:
            #return (key_value)
            if kv[0] == key:
                return kv[1]   
            else:
                return None
