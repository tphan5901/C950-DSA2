	Task1 
ID: 011746951
A. Identify a named self-adjusting algorithm (e.g., nearest neighbor algorithm, greedy algorithm) that could be used in your program to deliver the packages. 
A greedy algorithm will be used to deliver the packages.
 B. Identify a self-adjusting data structure, such as a hash table, that could be used with the algorithm identified in part A to store the package data. 
A Dictionary is a self-adjusting data structure that can be used in order to store packages.
1. Explain how your data structure accounts for the relationship between the data components you are storing.
The data structures decided for the program are lists and dictionaries. A Dictionary stores data as key-value pair. With dictionaries, we can access and change the package location in O(1) time if we know it's key. A list can store store packages and address as well however , it is more resource straining whenever data has to be accessed, a loop is required to search the list. To make the program more efficient an independent lookup function can be used whenever searching for a package.
C. Write an overview of your program in which you do the following:
1. Explain the algorithm’s logic using pseudocode.
define deliver():
    queue = [LoadPackages]
    while queue:
            package = lookUp(package.id)
            if package:
                distance = distanceData[truck.address][package.address]
                nextPackage = package
        if nextPackage:
            distance = distanceData[truck.address][nextPackage.address]
            truck.miles += distance
            truck.time += datetime.timedelta(minutes=(1 / (60 / 18))) //18mi/60mins

2.  Describe the programming environment you will use to create the Python application, including both the software and hardware you will use. 
Programming environment: VSCode IDE , IDE Terminal. Tabulate terminal package. Python version 3.8
3. Evaluate the space-time complexity of each major segment of the program and the entire program using big-O notation. 
First we need to parse the data from the csv and store them in a data structure. Individual parsing functions are used to accomplish this task. The time - space complexity depends on the exponential numbers rows from the csv file which will be O(N). A method implemented seperately to deliver packages runs in O(N^3) time. A while loop continously checks for packages in the truck object, another loop checks for packages in queue. The third loop counts the number of packages within a list and appends them to a queue. Space complexity is O(N) since we're going to use a queue to load up the packages and sort them in order to deliver.
4. Explain the capability of your solution to scale and adapt to a growing number of packages. 
The program relies on an external lookUp method, data structure (distanceData) for calculating distances. This design allows flexibility if data retrieval or distance methods needs to be changed. More extensive error handling can improve maintainability by making the system robust against unexpected input. Currently, the system operates in a single-threaded manner, processing one truck’s deliveries at a time. For scalability, parallelism could be introduced to process multiple trucks / packages concurrently, making the system more responsive to larger datasets. Refactoring the system to automatically handle additional trucks based on load would enhance scalability.
5. Discuss why the software design would be efficient and easy to maintain.
The code is modular, each function handles a specific part of the logic, such as loadAddresses(), loadPackages(). This separation of concerns makes it easier to maintain individual pieces without affecting the entire system. The program is straightforward to use with an implementation of terminal interface. Calculations are performed in the background and stored within class objects. Useful functions are implemented, that are accessible through dot operators. It maintainable , using basic programming principles , there are comments throughout the program explaining the code structure. Print statements on initialized memory structures are performed to verify data integrity.
 6. Describe both the strengths and weaknesses of the self-adjusting data structure (e.g., the hash table). 
Lists used to store a collection of items. In this case, package.It is capable of dynamic sizing based on the number of elements added. However, they are limited by the available memory of the hardware's RAM. Lists are straightforward to implement but lack the structure needed for more complex data handling. On the other hand, dictionaries provide a more organized way to manage key-value pairs.  They can encounter issues with hash collisions as more addresses are added, leading to slow lookups. When multiple values hash to the same bucket, it results in decreased performance.
D.  Provide an intuitive interface for the user to view the delivery status (including the delivery time) of any package at any time and the total mileage traveled by all trucks.  
1.  Provide screenshots to show the status of all packages loaded onto each truck at a time between 8:35 a.m. and 9:25 a.m. 
2.  Provide screenshots to show the status of all packages loaded onto each truck at a time between 9:35 a.m. and 10:25 a.m. 
3.  Provide screenshots to show the status of all packages loaded onto each truck at a time between 12:03 p.m. and 1:12 p.m. 

E.  Provide screenshots showing successful completion of the code that includes the total mileage traveled by all trucks.  
F.  Justify the package delivery algorithm used in the solution as written in the original program by doing the following: 
1.  Describe two or more strengths of the algorithm used in the solution. 
The greedy algorithm is highly efficient in making local decisions because it always chooses the closest package to deliver next. This helps to minimize unnecessary travel and reduce the total time and distance. The algorithm is straightforward to implement. It iterates over the list of packages on the truck and picks the best package based on the shortest distance. This approach works well, especially when there’s a need to deliver multiple packages with varying time constraints and addresses.
2.  Verify that the algorithm used in the solution meets all requirements in the scenario. 
Special Conditions: The program addresses specific conditions, such as handling package#9, which requires a different delivery address if delivered after 10:20 AM. The code checks the time (if package.id == '9' and truck.time > DeliveryTime) and dynamically adjusts the delivery address while delivering packages under 140miles.
3.  Identify two other named algorithms that are different from the algorithm implemented in the solution and would meet all requirements in the scenario. 
BFS and Dijkstra’s algorithm. 
a.  Describe how both algorithms identified in part F3 are different from the algorithm used in the solution. 
-Dijkstra's algorithm would prioritize evaluating all possible routes between delivery points to ensure the shortest path is found between each location, minimizing the total travel distance for the truck. This differs from the Greedy approach, which might make suboptimal decisions by choosing the nearest location at each step without considering how it fits into the overall route.
-Breadth-First Search (BFS) is a graph traversal algorithm that visits vertices in layers, starting from a designated source vertex. It systematically visits neighboring vertices at the present depth level before moving on to the vertices at the next depth level.
H.  Describe what you would do differently, other than the two algorithms identified in part F3, if you did this project again, including details of the modifications that would be made. 
A control structure would likely have been implemented to determine the appropriate truck assignment for packages based on delivery deadlines and special notes. This conditional logic allows the program to scale as additional data is introduced.
1. Identify two other data structures that coul meet the same requirements in the scenario  
The doubly linked list and the queue data structures could have also met the requirements for the scenario. 
a.  Describe how each data structure identified in H1 is different from the data structure used in the solution. 
A doubly linked list is a linear data structure where each node contains a reference to both the next and previous node. This allows traversal in both directions, making it more flexible than a singly linked list. Each node stores data and two pointers, one pointing to the next node and another to the previous node.
A stack could be used to keep track of delivery decisions. As packages are loaded onto a truck, the stack could track the loading sequence, allowing the driver to quickly access and deliver the most recently loaded package first. However, this approach is not optimize for the shortest delivery route, unlike a hash table or graph-based solution that can consider all package locations simultaneously.

I. References: Hashtable implementation sourced from webinar
class HashTable:
    def __init__(self, initial_capacity=41):
        # initialize the table with predefined capacity
        self.initial_capacity = initial_capacity
        self.table = []
        for i in range(initial_capacity):
            self.table.append([])

    #function to add new item to table. O(1)
    def insert(self, key, item):
        #first hashes the key with length of table
        bucket = hash(key) % len(self.table)
        bucket_list = self.table[bucket]
        for kv in bucket_list:
            if kv[0] == key:
                kv[1] = item
                return True
        # insert key/value pair as item to table
        key_value = [key, item]
        bucket_list.append(key_value)
        return True

    #search for an item with matching key in hash table. hashes the parameter key and checks if the hashed key matches with existing keys in the table. O(1)
    def search(self, key):
        bucket = hash(key) % len(self.table)
        bucket_list = self.table[bucket]
        # search for the key in the bucket 
        for kv in bucket_list:
            #return (key_value)
            if kv[0] == key:
                return kv[1]   
            else:
                return None
